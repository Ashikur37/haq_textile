// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id     Int     @id @default(autoincrement())
  image  String?
  serial Int     @default(0)
}

model Category {
  id        Int                    @id @default(autoincrement())
  name      String
  slug      String                 @unique
  parent_id Int?
  parent    Category?              @relation("ParentChilds", fields: [parent_id], references: [id])
  childs    Category[]             @relation("ParentChilds")
  products  CategoriesOnProducts[]
  createdAt DateTime               @default(now()) @map(name: "created_at")
  updatedAt DateTime               @updatedAt @map(name: "updated_at")
}

model Product {
  id          Int                    @id @default(autoincrement())
  name        String
  slug        String                 @unique
  image       String?
  description String
  min_order   Int                    @default(1)
  images      ProductImage[]
  featured    Boolean                @default(false)
  categories  CategoriesOnProducts[]
  colors      ColorsOnProducts[]
  prices      Price[]
  sizes       SizesOnProducts[]
  times       LeadTime[]
}

model LeadTime {
  id        Int     @id @default(autoincrement())
  quantity  String
  time      String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Price {
  id        Int     @id @default(autoincrement())
  label  String
  unitPrice Float
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([productId, categoryId])
}

model ColorsOnProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int // relation scalar field (used in the `@relation` attribute above)
  extra     Float   @default(0.0)
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int // relation scalar field (used in the `@relation` attribute above)

  @@id([productId, colorId])
}

model SizesOnProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int // relation scalar field (used in the `@relation` attribute above)
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int // relation scalar field (used in the `@relation` attribute above)
  extra     Float   @default(0.0)

  @@id([productId, sizeId])
}

model Setting {
  id            Int     @id @default(1)
  company_name  String
  logo          String?
  contact_no    String?
  contact_email String?
  facebook      String?
  youtube       String?
  address       String?
  theme_color   String?
}

model Color {
  id               Int                @id @default(autoincrement())
  name             String
  code             String
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @updatedAt @map(name: "updated_at")
  ColorsOnProducts ColorsOnProducts[]
}

model Size {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  SizesOnProducts SizesOnProducts[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  image     String?
  productId Int
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
